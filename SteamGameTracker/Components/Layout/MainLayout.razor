@inherits LayoutComponentBase
@inject NavigationManager Navigation
@using System.Text.RegularExpressions
@using SteamGameTracker.Components.Pages
@implements IDisposable

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>
    <main>
        <div class="top-row px-4">
            <h2 class="top-row-headline">@PageTitle</h2>
        </div>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>
<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private string PageTitle { get; set; } = PageTitleConstants.Home;
    private Dictionary<string, string> RouteToTitleMap = new Dictionary<string, string>
    {
        { "/", PageTitleConstants.Home },
        { "/playercount", PageTitleConstants.PlayerCount },
    };

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += LocationChanged;
        UpdatePageTitle(Navigation.Uri);
    }

    private void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        UpdatePageTitle(e.Location);
        StateHasChanged();
    }

    private void UpdatePageTitle(string uri)
    {
        // Extract the path from the full URI
        var path = new Uri(uri).AbsolutePath;

        if (RouteToTitleMap.TryGetValue(path, out var title))
        {
            PageTitle = title;
        }
        else
        {
            // Handle routes not in the map by creating a title from the path
            // Remove leading slash and capitalize words
            if (path.StartsWith("/")) path = path.Substring(1);
            if (string.IsNullOrEmpty(path)) path = PageTitleConstants.Home;

            PageTitle = Regex.Replace(
                path,
                "[-/]([a-z])",
                match => " " + match.Groups[1].Value.ToUpper());

            PageTitle = char.ToUpper(PageTitle[0]) + PageTitle.Substring(1);
        }
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= LocationChanged;
    }
}